{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"100 Automations Site Architecture for Development Welcome to 100 Automations: a github nexus for open source development. 100 Automations was built using Jekyll , a Ruby Gem. In addition to the use of HTMl, CSS, and Javascript; Jekyll uses Liquid , a template language written in Ruby. 100 Automations uses Docker for a server. You really only need to install Docker, be sure to become familiar with both Jekyll, and Liquid.","title":"Home"},{"location":"#100-automations-site-architecture-for-development","text":"Welcome to 100 Automations: a github nexus for open source development. 100 Automations was built using Jekyll , a Ruby Gem. In addition to the use of HTMl, CSS, and Javascript; Jekyll uses Liquid , a template language written in Ruby. 100 Automations uses Docker for a server. You really only need to install Docker, be sure to become familiar with both Jekyll, and Liquid.","title":"100 Automations Site Architecture for Development"},{"location":"site/","text":"Site Components for 100 Automations Split between Front-End (UI and UX: HTML, SASS, Etc.) and Back-end (Programming and Data: Ruby) Front-End The \"Front-End\" of our site will be defined by the HTML and CSS we create. We will be processing the Front-End using Jekyll. Jekyll has it's own SASS processor that we will be using. All styles can be found in the _sass/ section of this document. HTML displaying our site The HTML is responsible for displaying the site. The way a page is displayed is ranked in order: Front Matter: This is where data is contained in the page. Liquid: This is usually responsibly for querying the data. HTML: The text that this document holds for display. Javascript: Responsible for UI, UX. Liquid will help with processing our back-end elements for display. The HTML is responsible for all page building elements and for containing liquid. Javascript is used within the site to help execute User Experiences. Javascript can also contain back-end elements using liquid. _includes/ An \"include\" component is a section of each page within our site. Each include folder contains several different files and an index.html . index.html is the root directory for each folder and establishes how the page is built. The folders represent each page: About All-Guides Default Home Press There is also a file called toc.html . _layouts/ This folder contains the layouts of each page that is in the site. Layouts are different from includes, and define the layout of a collection's output. Sass Styles Jekyll has it's own Sass processor, and this is defined in our config.yml . The _sass will be imported into the site's assests/css/ . Back-End The \"Back-End\" is written in Ruby, and this means that your liquid objects are processed by jekyll first. Jekyll will process the liquid on a .html before the HTML text. The same goes for any documents written in Ruby: All .yml processed first. These documents are considered the \"Back-End\" of the site, and are located not only in liquid but in the front matter as well Ruby Ruby is responsible for holding and querying data: Automations Guides Team Bios Memes Social Media Posts Ruby also establishes routing; processes SASS; Builds the site. This is being done with Jekyll. _data/ This is used for establishing routing for the different components on the site.","title":"Site"},{"location":"site/#site-components-for-100-automations","text":"Split between Front-End (UI and UX: HTML, SASS, Etc.) and Back-end (Programming and Data: Ruby)","title":"Site Components for 100 Automations"},{"location":"site/#front-end","text":"The \"Front-End\" of our site will be defined by the HTML and CSS we create. We will be processing the Front-End using Jekyll. Jekyll has it's own SASS processor that we will be using. All styles can be found in the _sass/ section of this document.","title":"Front-End"},{"location":"site/#html-displaying-our-site","text":"The HTML is responsible for displaying the site. The way a page is displayed is ranked in order: Front Matter: This is where data is contained in the page. Liquid: This is usually responsibly for querying the data. HTML: The text that this document holds for display. Javascript: Responsible for UI, UX. Liquid will help with processing our back-end elements for display. The HTML is responsible for all page building elements and for containing liquid. Javascript is used within the site to help execute User Experiences. Javascript can also contain back-end elements using liquid.","title":"HTML displaying our site"},{"location":"site/#_includes","text":"An \"include\" component is a section of each page within our site. Each include folder contains several different files and an index.html . index.html is the root directory for each folder and establishes how the page is built. The folders represent each page: About All-Guides Default Home Press There is also a file called toc.html .","title":"_includes/"},{"location":"site/#_layouts","text":"This folder contains the layouts of each page that is in the site. Layouts are different from includes, and define the layout of a collection's output.","title":"_layouts/"},{"location":"site/#sass-styles","text":"Jekyll has it's own Sass processor, and this is defined in our config.yml . The _sass will be imported into the site's assests/css/ .","title":"Sass Styles"},{"location":"site/#back-end","text":"The \"Back-End\" is written in Ruby, and this means that your liquid objects are processed by jekyll first. Jekyll will process the liquid on a .html before the HTML text. The same goes for any documents written in Ruby: All .yml processed first. These documents are considered the \"Back-End\" of the site, and are located not only in liquid but in the front matter as well","title":"Back-End"},{"location":"site/#ruby","text":"Ruby is responsible for holding and querying data: Automations Guides Team Bios Memes Social Media Posts Ruby also establishes routing; processes SASS; Builds the site. This is being done with Jekyll.","title":"Ruby"},{"location":"site/#_data","text":"This is used for establishing routing for the different components on the site.","title":"_data/"},{"location":"Back-End/","text":"Directory: Folder Names This page will provide information on the folder name and purpose. Collections Automations _automations/ Guides _guides/ Bios _bios/ Memes _memes/ Social Media Posts _social-media-posts/ Data _data/ nav.yml pres-kit.yml","title":"Folders"},{"location":"Back-End/#directory-folder-names","text":"This page will provide information on the folder name and purpose.","title":"Directory: Folder Names"},{"location":"Back-End/#collections","text":"","title":"Collections"},{"location":"Back-End/#automations","text":"_automations/","title":"Automations"},{"location":"Back-End/#guides","text":"_guides/","title":"Guides"},{"location":"Back-End/#bios","text":"_bios/","title":"Bios"},{"location":"Back-End/#memes","text":"_memes/","title":"Memes"},{"location":"Back-End/#social-media-posts","text":"_social-media-posts/","title":"Social Media Posts"},{"location":"Back-End/#data","text":"_data/ nav.yml pres-kit.yml","title":"Data"},{"location":"Back-End/collections/","text":"Collections _automations/ 100 Automations is a website built to host Automations or automatic software programming. Those Automations are stored in our collections as data in Ruby. There is no markdown contained within the file. If you want to display the data within automations you will have to iterate through the data using liquid. _guides/ In addition to the front matter inside of a guide there is also markdown content. This content is displayed accessing the default content property. This file is viewable because our config.yml file states that the output of this file should be viewable. There is also a layout under the same name that coordinates how each guide should be displayed. _bios/ If you are on the 100 Automations team, either building an automation or the website, you will be creating a bio. Bios are like automations, they only contain front matter and contain no content in markdown. _social-media-posts/ The images for social media posts is also located in the assets/images/ . However each document in social media posts is for each social media network. --- have-an-idea: src: assets/images/social-media-posts/FB-have-an-idea.png alt: Have an Idea? host-automation: src: assets/images/social-media-posts/FB-host-automation.png alt: Host An Automation logo: src: assets/images/social-media-posts/FB-logo.png alt: logo social: Facebook --- This is the social media posts that we have for Facebook. The other documents in the collection reference different images for their social media website. _memes/ The content for Memes is located in the front matter. The data located in memes is the url of the static assets/images/ . There is also an alt and title to describe the picture.","title":"Collections"},{"location":"Back-End/collections/#collections","text":"","title":"Collections"},{"location":"Back-End/collections/#_automations","text":"100 Automations is a website built to host Automations or automatic software programming. Those Automations are stored in our collections as data in Ruby. There is no markdown contained within the file. If you want to display the data within automations you will have to iterate through the data using liquid.","title":"_automations/"},{"location":"Back-End/collections/#_guides","text":"In addition to the front matter inside of a guide there is also markdown content. This content is displayed accessing the default content property. This file is viewable because our config.yml file states that the output of this file should be viewable. There is also a layout under the same name that coordinates how each guide should be displayed.","title":"_guides/"},{"location":"Back-End/collections/#_bios","text":"If you are on the 100 Automations team, either building an automation or the website, you will be creating a bio. Bios are like automations, they only contain front matter and contain no content in markdown.","title":"_bios/"},{"location":"Back-End/collections/#_social-media-posts","text":"The images for social media posts is also located in the assets/images/ . However each document in social media posts is for each social media network. --- have-an-idea: src: assets/images/social-media-posts/FB-have-an-idea.png alt: Have an Idea? host-automation: src: assets/images/social-media-posts/FB-host-automation.png alt: Host An Automation logo: src: assets/images/social-media-posts/FB-logo.png alt: logo social: Facebook --- This is the social media posts that we have for Facebook. The other documents in the collection reference different images for their social media website.","title":"_social-media-posts/"},{"location":"Back-End/collections/#_memes","text":"The content for Memes is located in the front matter. The data located in memes is the url of the static assets/images/ . There is also an alt and title to describe the picture.","title":"_memes/"},{"location":"Back-End/config/","text":"The Config File _config.yml This is the central nervous system to the site. The config file is not only responsible for creating our development environment, but it also directs jekyll on how to build the _site/ . title: 100 Automations email: 100Automations@hackforla.org description: The 100 Automations project showcases Hack for LA automations and microservices that reduce repetitive work in open source development. SASS Processing This is how the scss files are processed. The SASS has a directory it can be found in and a style for processing. sass: sass_dir: _sass style: compressed Creating a page for a collection file Collections are markdown files that contain data. The collections have an output option that can be set to true. When output is true, Jekyll will create a new .html to replace the collection file in the _site/ . Jekyll creates a new url that you can now access the document. collections: social-media-posts: output: true memes: automations: guides: output: true pages: output: true bios: output: true In order for the site to look uniform we specify the layout for each document. defaults: - scope: path: \"\" type: \"guides\" values: layout: \"guides\" - scope: path: \"\" type: \"pages\" values: layout: \"guides\" - scope: path: \"\" type: \"bios\" values: layout: \"bios\" - scope: path: \"\" values: layout: \"default\"","title":"_config.yml"},{"location":"Back-End/config/#the-config-file","text":"_config.yml This is the central nervous system to the site. The config file is not only responsible for creating our development environment, but it also directs jekyll on how to build the _site/ . title: 100 Automations email: 100Automations@hackforla.org description: The 100 Automations project showcases Hack for LA automations and microservices that reduce repetitive work in open source development.","title":"The Config File"},{"location":"Back-End/config/#sass-processing","text":"This is how the scss files are processed. The SASS has a directory it can be found in and a style for processing. sass: sass_dir: _sass style: compressed","title":"SASS Processing"},{"location":"Back-End/config/#creating-a-page-for-a-collection-file","text":"Collections are markdown files that contain data. The collections have an output option that can be set to true. When output is true, Jekyll will create a new .html to replace the collection file in the _site/ . Jekyll creates a new url that you can now access the document. collections: social-media-posts: output: true memes: automations: guides: output: true pages: output: true bios: output: true In order for the site to look uniform we specify the layout for each document. defaults: - scope: path: \"\" type: \"guides\" values: layout: \"guides\" - scope: path: \"\" type: \"pages\" values: layout: \"guides\" - scope: path: \"\" type: \"bios\" values: layout: \"bios\" - scope: path: \"\" values: layout: \"default\"","title":"Creating a page for a collection file"},{"location":"Back-End/data/","text":"_data/ The data folder exists for holding different data files. Currently the only data file that is contained within the data folder is called nav.yml - name: Home link: \"/\" - name: Press link: press-kit/press-kit-index - name: About link: about - name: Guides link: all_guides - name: Bios link: press-kit/all_bios This creates an array of different objects containing a name and link. The name is arbitrary, but the link is the name of the file that will be displayed. We access these files using {{ data.nav }} . For example to access Guides simply go to {{ data.nav[2] }} . Then you can target and display the pages name and link using the name and link properties: {{ data.nav[2].name }} or {{ data.nav[2].link }} .","title":"_data/"},{"location":"Back-End/data/#_data","text":"The data folder exists for holding different data files. Currently the only data file that is contained within the data folder is called nav.yml - name: Home link: \"/\" - name: Press link: press-kit/press-kit-index - name: About link: about - name: Guides link: all_guides - name: Bios link: press-kit/all_bios This creates an array of different objects containing a name and link. The name is arbitrary, but the link is the name of the file that will be displayed. We access these files using {{ data.nav }} . For example to access Guides simply go to {{ data.nav[2] }} . Then you can target and display the pages name and link using the name and link properties: {{ data.nav[2].name }} or {{ data.nav[2].link }} .","title":"_data/"},{"location":"Front-End/","text":"Directory: Folder Names This page will provide information on the folder name and purpose. _includes/ If you are working on a new element for a page or an existing element. About Contains all the includes for the \"About\" page. All Guides Contains includes for the \"All Guides\" page. Home Contains the includes for the \"Home\" page. Press Contains the includes for the \"Press\" page. toc.html This is an include for a guides section header menu. _layouts/ If you are trying to change how all pages look or define a collections output. Default This is the layout for all pages in the site. This defines the doctype, html, and body. Guides This is the layout for the guides collection output. Each guide looks like the guides layout. _sass/ This is the folder that will hold all of your styles for everything. Components For styling buttons, flexbox, cards, and chips. Includes For styling the includes. Layouts For styling the layouts. Press-Kit For styling the different pages on the press-kit page. Variables Setting standard styles from Hack4LA. index.scss Imports all folders. assets/ Static files and imports. css This is only to import Sass and does not need to be developed images All of the images are held in this folder.","title":"Folders"},{"location":"Front-End/#directory-folder-names","text":"This page will provide information on the folder name and purpose.","title":"Directory: Folder Names"},{"location":"Front-End/#_includes","text":"If you are working on a new element for a page or an existing element.","title":"_includes/"},{"location":"Front-End/#about","text":"Contains all the includes for the \"About\" page.","title":"About"},{"location":"Front-End/#all-guides","text":"Contains includes for the \"All Guides\" page.","title":"All Guides"},{"location":"Front-End/#home","text":"Contains the includes for the \"Home\" page.","title":"Home"},{"location":"Front-End/#press","text":"Contains the includes for the \"Press\" page.","title":"Press"},{"location":"Front-End/#tochtml","text":"This is an include for a guides section header menu.","title":"toc.html"},{"location":"Front-End/#_layouts","text":"If you are trying to change how all pages look or define a collections output.","title":"_layouts/"},{"location":"Front-End/#default","text":"This is the layout for all pages in the site. This defines the doctype, html, and body.","title":"Default"},{"location":"Front-End/#guides","text":"This is the layout for the guides collection output. Each guide looks like the guides layout.","title":"Guides"},{"location":"Front-End/#_sass","text":"This is the folder that will hold all of your styles for everything.","title":"_sass/"},{"location":"Front-End/#components","text":"For styling buttons, flexbox, cards, and chips.","title":"Components"},{"location":"Front-End/#includes","text":"For styling the includes.","title":"Includes"},{"location":"Front-End/#layouts","text":"For styling the layouts.","title":"Layouts"},{"location":"Front-End/#press-kit","text":"For styling the different pages on the press-kit page.","title":"Press-Kit"},{"location":"Front-End/#variables","text":"Setting standard styles from Hack4LA.","title":"Variables"},{"location":"Front-End/#indexscss","text":"Imports all folders.","title":"index.scss"},{"location":"Front-End/#assets","text":"Static files and imports.","title":"assets/"},{"location":"Front-End/#css","text":"This is only to import Sass and does not need to be developed","title":"css"},{"location":"Front-End/#images","text":"All of the images are held in this folder.","title":"images"},{"location":"Front-End/_includes/","text":"_includes/ Home/ index.html : {% include Home/action.html %} {% include Home/wave.html %} {% include Home/ato_grid.html %} {% include Home/border.html %} {% include Home/guide_grid.html %} The Home page is our most populous page containing three sections and a divider component. The divider is called wave.html . border.html is a section containing three separate user experiences. About/ index.html : {% include About/about_one.html %} {% include About/join_us.html %} {% include About/acknowledgements.html %} As you can see from the index file this page is built using three components. The order in which we use our include statement is the order that these files are displayed on our page. about_one.html Image of the about 100 Automations section Press/ index.html : {% include Press/press_action.html %} {% include Press/wave.html %} {% include Press/share_ato.html %} This is the press page which only has two sections for content. If you notice, there is also a wave.html : just like the home page. The press_action.html is a page that contains all the links to navigate the press-kit/ All-Guides/ index.html : {% include All-Guides/all_guides_hero.html %} {% include All-Guides/all_guides_list.html %} As you can see from the index file this page is built using two components. The order in which we use our include statement is the order that these files are displayed on our page. toc.html This file is located in the includes and belongs to the guide layuout. In read the markdown file that is being processed through jekyll we include toc.html toc.html captures the jekyll variables and creates an html nav item list.","title":"_includes/"},{"location":"Front-End/_includes/#_includes","text":"","title":"_includes/"},{"location":"Front-End/_includes/#home","text":"index.html : {% include Home/action.html %} {% include Home/wave.html %} {% include Home/ato_grid.html %} {% include Home/border.html %} {% include Home/guide_grid.html %} The Home page is our most populous page containing three sections and a divider component. The divider is called wave.html . border.html is a section containing three separate user experiences.","title":"Home/"},{"location":"Front-End/_includes/#about","text":"index.html : {% include About/about_one.html %} {% include About/join_us.html %} {% include About/acknowledgements.html %} As you can see from the index file this page is built using three components. The order in which we use our include statement is the order that these files are displayed on our page. about_one.html Image of the about 100 Automations section","title":"About/"},{"location":"Front-End/_includes/#press","text":"index.html : {% include Press/press_action.html %} {% include Press/wave.html %} {% include Press/share_ato.html %} This is the press page which only has two sections for content. If you notice, there is also a wave.html : just like the home page. The press_action.html is a page that contains all the links to navigate the press-kit/","title":"Press/"},{"location":"Front-End/_includes/#all-guides","text":"index.html : {% include All-Guides/all_guides_hero.html %} {% include All-Guides/all_guides_list.html %} As you can see from the index file this page is built using two components. The order in which we use our include statement is the order that these files are displayed on our page.","title":"All-Guides/"},{"location":"Front-End/_includes/#tochtml","text":"This file is located in the includes and belongs to the guide layuout. In read the markdown file that is being processed through jekyll we include toc.html toc.html captures the jekyll variables and creates an html nav item list.","title":"toc.html"},{"location":"Front-End/_layouts/","text":"_layouts/ default.html guides.html Each guide has a layout that is determined by the guides.html We use the _includes/toc.html to make a nav menu. The {{ content }} is the markdown text in the markdown file.","title":"_layouts/"},{"location":"Front-End/_layouts/#_layouts","text":"","title":"_layouts/"},{"location":"Front-End/_layouts/#defaulthtml","text":"","title":"default.html"},{"location":"Front-End/_layouts/#guideshtml","text":"Each guide has a layout that is determined by the guides.html We use the _includes/toc.html to make a nav menu. The {{ content }} is the markdown text in the markdown file.","title":"guides.html"},{"location":"Front-End/_sass/","text":"_sass/ This folder conatins all of the styles and scss. This folder is processed using jekyll's built in SASS processor. This folder is imported into assets/css and used to build our _site folder. index.scss @import \"variables/index.scss\"; @import \"components/index.scss\"; @import \"includes/index.scss\"; @import \"layouts/index.scss\"; @import \"press-kit/all_bios.scss\"; This is the folder directory. Each folder has a directory that imports all files. components/ @import \"buttons.scss\"; @import \"cards.scss\"; @import \"flexbox.scss\"; @import \"chips.scss\"; Each component is stored and categorized in the files show above. These are components that are mapped out across the site. To style a component within the site check to see if already exists in the components folder. Then use the class name in the html of your component and style. includes/ @import \"About/index.scss\"; @import \"All-Guides/index.scss\"; @import \"Default/index.scss\"; @import \"Home/index.scss\"; @import \"Press/index.scss\"; Includes are first organized by the page that the include exists on. When you style a page you use includes to componentize each section of the page. Each page is built using includes and those includes contain styles for: Typography Spacing Layout Color layouts/ @import 'guides_hero.scss'; @import 'guides.scss'; This example above is for styling each guide. Each guide is displayed using the _layouts/guides.html . The layouts are directly correlated to the layouts folder. Currently the layouts that are being used are guides. press-kitstyle Press-kit is a folder located in the root of the site. This folder contains the different sections of the Press Kit Page. This folder is for styling the subpages of the press-kit page. variables/ @import \"colors.scss\"; @import \"typography.scss\"; Variables are used to create a shorthand expression in place of the css code for colors and typography.","title":"_sass/"},{"location":"Front-End/_sass/#_sass","text":"This folder conatins all of the styles and scss. This folder is processed using jekyll's built in SASS processor. This folder is imported into assets/css and used to build our _site folder.","title":"_sass/"},{"location":"Front-End/_sass/#indexscss","text":"@import \"variables/index.scss\"; @import \"components/index.scss\"; @import \"includes/index.scss\"; @import \"layouts/index.scss\"; @import \"press-kit/all_bios.scss\"; This is the folder directory. Each folder has a directory that imports all files.","title":"index.scss"},{"location":"Front-End/_sass/#components","text":"@import \"buttons.scss\"; @import \"cards.scss\"; @import \"flexbox.scss\"; @import \"chips.scss\"; Each component is stored and categorized in the files show above. These are components that are mapped out across the site. To style a component within the site check to see if already exists in the components folder. Then use the class name in the html of your component and style.","title":"components/"},{"location":"Front-End/_sass/#includes","text":"@import \"About/index.scss\"; @import \"All-Guides/index.scss\"; @import \"Default/index.scss\"; @import \"Home/index.scss\"; @import \"Press/index.scss\"; Includes are first organized by the page that the include exists on. When you style a page you use includes to componentize each section of the page. Each page is built using includes and those includes contain styles for: Typography Spacing Layout Color","title":"includes/"},{"location":"Front-End/_sass/#layouts","text":"@import 'guides_hero.scss'; @import 'guides.scss'; This example above is for styling each guide. Each guide is displayed using the _layouts/guides.html . The layouts are directly correlated to the layouts folder. Currently the layouts that are being used are guides.","title":"layouts/"},{"location":"Front-End/_sass/#press-kitstyle","text":"Press-kit is a folder located in the root of the site. This folder contains the different sections of the Press Kit Page. This folder is for styling the subpages of the press-kit page.","title":"press-kitstyle"},{"location":"Front-End/_sass/#variables","text":"@import \"colors.scss\"; @import \"typography.scss\"; Variables are used to create a shorthand expression in place of the css code for colors and typography.","title":"variables/"},{"location":"Front-End/assets/","text":"assets/ This folder contains static files contained on the site. In the _site/ you will have all of your css and images. Images are used throughout the site within the components with which their folders are named: automations guides memes social-media-posts The folders icons/ and illustrations/ are used within the sites interface.","title":"assets/"},{"location":"Front-End/assets/#assets","text":"This folder contains static files contained on the site. In the _site/ you will have all of your css and images. Images are used throughout the site within the components with which their folders are named: automations guides memes social-media-posts The folders icons/ and illustrations/ are used within the sites interface.","title":"assets/"}]}